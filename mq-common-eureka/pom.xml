<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.2.RELEASE</version>
		<relativePath/>
	</parent>
    <groupId>mq.common.eureka</groupId>
    <artifactId>mq-common-eureka</artifactId>
    <version>1.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<spring-cloud.version>Finchley.SR2</spring-cloud.version>
		<dockerfile.skip>true</dockerfile.skip>

	</properties>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<dependencies>
		<!--&lt;!&ndash;<dependency>&ndash;&gt;-->
			<!--&lt;!&ndash;<groupId>kafka.adapter</groupId>&ndash;&gt;-->
			<!--&lt;!&ndash;<artifactId>kafka-adapter</artifactId>&ndash;&gt;-->
			<!--&lt;!&ndash;<version>1.0-SNAPSHOT</version>&ndash;&gt;-->
		<!--&lt;!&ndash;</dependency>&ndash;&gt;-->

	<!--&lt;!&ndash; https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-eureka-server &ndash;&gt;-->
		<!--<dependency>-->
			<!--<groupId>org.springframework.cloud</groupId>-->
			<!--<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>-->
			<!--<version>2.0.3.RELEASE</version>-->
		<!--</dependency>-->

		<!--&lt;!&ndash;<dependency>&ndash;&gt;-->
			<!--&lt;!&ndash;<groupId>org.springframework.boot</groupId>&ndash;&gt;-->
			<!--&lt;!&ndash;<artifactId>spring-boot-starter-web</artifactId>&ndash;&gt;-->
			<!--&lt;!&ndash;<version>2.0.5.RELEASE</version>&ndash;&gt;-->
		<!--&lt;!&ndash;</dependency>&ndash;&gt;-->

		<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.9</version>
		</dependency>

		<!--<dependency>-->
			<!--<groupId>org.springframework.boot</groupId>-->
			<!--<artifactId>spring-boot-starter-test</artifactId>-->
			<!--<version>2.0.2.RELEASE</version>-->
			<!--<scope>test</scope>-->
		<!--</dependency>-->
		<!--添加配置中心的安全保护依赖  -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<!--<dependency>-->
			<!--<groupId>org.springframework.cloud</groupId>-->
			<!--<artifactId>spring-cloud-starter-bus-amqp</artifactId>-->
			<!--&lt;!&ndash;<version>2.0.2.RELEASE</version>&ndash;&gt;-->
		<!--</dependency>-->
		<!--添加config 客户端的依赖-->
		<!--<dependency>-->
			<!--<groupId>org.springframework.cloud</groupId>-->
			<!--<artifactId>spring-cloud-starter-config</artifactId>-->
		<!--</dependency>-->
		<!--添加  重试机制 的依赖
            因网络的抖动等原因导致config-client在启动时候访问config-server没有访问成功从而报错，
            希望config-client能重试几次，故重试机制
            -->
		<dependency>
			<groupId>org.springframework.retry</groupId>
			<artifactId>spring-retry</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<!-- kafka依赖 -->
		<!--<dependency>-->
			<!--<groupId>org.springframework.cloud</groupId>-->
			<!--<artifactId>spring-cloud-starter-bus-kafka</artifactId>-->
		<!--</dependency>-->

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
			<!--<version>2.0.2.RELEASE</version>-->

		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-commons</artifactId>
		</dependency>

		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.2</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.2.3</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-access</artifactId>
			<version>1.2.3</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>1.2.3</version>
		</dependency>

		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.11.2</version>
			<scope>compile</scope>
			<!--<optional>true</optional>-->
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.11.2</version>
			<scope>compile</scope>
			<!--<optional>true</optional>-->
		</dependency>

		<dependency>
			<groupId>net.logstash.logback</groupId>
			<artifactId>logstash-logback-encoder</artifactId>
			<version>4.11</version>
			<exclusions>
				<exclusion>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-classic</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.26</version>
			<classifier>javadoc</classifier>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.26</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>1.7.26</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>log4j-over-slf4j</artifactId>
			<version>1.7.26</version>
		</dependency>
		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>1.6.1</version>
		</dependency>
        <dependency>
            <groupId>com.digital.dance.framework</groupId>
            <artifactId>framework.infrastructure.commons</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>

		<dependency>
		<groupId>mq.common.adapter</groupId>
		<artifactId>mq-common-adapter</artifactId>
		<version>1.0.0-SNAPSHOT</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<!--<version>2.0.2.RELEASE</version>-->
				<configuration>
					<!-- 工程主入口-->
					<mainClass>org.xinyu.com.eureka.EurekaServerApplication</mainClass>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!--&lt;!&ndash; Jib &ndash;&gt;-->
			<!--<plugin>-->
				<!--<groupId>com.google.cloud.tools</groupId>-->
				<!--<artifactId>jib-maven-plugin</artifactId>-->
				<!--<version>0.9.11</version>-->
				<!--<configuration>-->
					<!--<from>-->
						<!--&lt;!&ndash; 这是我的阿里云镜像仓库，换成你们的，下面介绍创建方式 &ndash;&gt;-->
						<!--<image>www.digital.dance.com:5001/repository/digital.dance.docker/</image>-->
						<!--<auth>-->
							<!--<username>admin</username>-->
							<!--<password>admin123</password>-->
						<!--</auth>-->
					<!--</from>-->
					<!--<to>-->
						<!--&lt;!&ndash; 这是我的阿里云镜像仓库，换成你们的，下面介绍创建方式 &ndash;&gt;-->
						<!--<image>www.digital.dance.com:5001/repository/digital.dance.docker/</image>-->
					<!--</to>-->
				<!--</configuration>-->
				<!--<executions>-->
					<!--<execution>-->
						<!--<phase>package</phase>-->
						<!--<goals>-->
							<!--<goal>build</goal>-->
						<!--</goals>-->
					<!--</execution>-->
				<!--</executions>-->
			<!--</plugin>-->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>dockerfile-maven-plugin</artifactId>
				<version>1.4.9</version>
				<!-- 运行mvn 打包命令时会自动打包镜像并推送  -->
				<executions>
					<execution>
						<id>default</id>
						<goals>
							<goal>build</goal>
							<!-- 推送 -->
							<goal>push</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<skip>${dockerfile.skip}</skip>

					<!--&lt;!&ndash; 测试推送到docker hub的仓库 &ndash;&gt;-->
					<repository>www.digital.dance.com:5001/repository/digital.dance.docker/mq-common-eureka</repository>
					<useMavenSettingsForAuth>true</useMavenSettingsForAuth>

					<buildDirectory>${project.basedir}/target/</buildDirectory>

					<!--//上下文路径配置，此处设置为项目根路径-->
					<contextDirectory>${project.basedir}</contextDirectory>
					<tag>v1</tag>
					<!--&lt;!&ndash; 这个是你要在dockerfile里使用的maven变量，在此处配置后可在dockerfile里使用该 变量 &ndash;&gt;-->
					<buildArgs>
						<BUILD_WORKDIR>${project.basedir}/</BUILD_WORKDIR>
						<JAR_FILE>target/mq-common-eureka-1.0.0-SNAPSHOT.jar</JAR_FILE>
						<!--<SH_WORKDIR>${project.basedir}</SH_WORKDIR>-->
						<SH_FILE>eureka-start.sh</SH_FILE>
						<SERVER_PORT>8761</SERVER_PORT>
					</buildArgs>
				</configuration>
			</plugin>

		</plugins>
	</build>
</project>