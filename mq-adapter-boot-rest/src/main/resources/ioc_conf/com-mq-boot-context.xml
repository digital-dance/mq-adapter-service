<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"

	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
	default-lazy-init="false">

	<context:component-scan base-package="org.xinyu.com.mq.*" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />

    </context:component-scan>

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:**/system.properties</value>
				<value>classpath*:**/jdbc.properties</value>
			</list>
		</property>
		<property name="fileEncoding" value="UTF-8" />
	</bean>

	<!--<bean id="appPropsConfigLocation" class="com.hp.serverroom.email.commons.AppPropsConfigLocation">-->
		<!--<property name="locations">-->
			<!--<list>-->
				<!--<value>classpath*:**/serverroom-email-impl-test-system.properties</value>-->
			<!--</list>-->
		<!--</property>-->
		<!---->
	<!--</bean>-->

	<bean id="consumerProperties1" class="java.util.HashMap">
		<constructor-arg>
			<map>
				<entry key="bootstrap.servers" value="${bootstrap.servers}"/>
				<entry key="group.id" value="1"/>
				<entry key="retries" value="1"/>
				<entry key="batch.size" value="16384"/>
				<entry key="linger.ms" value="1"/>
				<entry key="buffer.memory" value="33554432"/>
				<entry key="enable.auto.commit" value="${enable.auto.commit}"/>
				<entry key="auto.commit.interval.ms" value="${auto.commit.interval.ms}"/>
				<entry key="session.timeout.ms" value="${session.timeout.ms}"/>
				<entry key="key.deserializer" value="org.apache.kafka.common.serialization.StringDeserializer"/>
				<entry key="value.deserializer" value="org.apache.kafka.common.serialization.StringDeserializer"/>
			</map>
		</constructor-arg>
	</bean>

	<!-- <import resource="classpath*:**/serverroom-email-dao.xml" /> -->
	<import resource="classpath*:**/conf/com-mq-producer-impl.xml" />
	<import resource="classpath*:**/conf/com-mq-consumer-impl.xml" />

	<!-- 消费者容器配置信息 -->
	<!--<bean id="containerProperties_example" class="org.springframework.kafka.listener.ContainerProperties">-->
	<!--<constructor-arg value="orderTopic"/>-->
	<!--<property name="messageListener" ref="msgHandler"/>-->
	<!--<property name="ackMode" ref="manual"/>-->
	<!--<property name="consumerRebalanceListener" ref="consumerAwareRebalanceListener"/>-->
	<!--</bean>-->


	<!-- 创建messageListenerContainer bean，使用的时候，只需要注入这个bean -->
	<!--<bean id="messageListenerContainer_example" class="org.springframework.kafka.listener.KafkaMessageListenerContainer"-->
	<!--<init-method="doStart">-->
	<!--<constructor-arg ref="consumerFactory"/>-->
	<!--<constructor-arg ref="containerProperties_example"/>-->
	<!--</bean>-->

	<!-- 创建consumerFactory bean -->
	<bean id="consumerFactory1" class="org.springframework.kafka.core.DefaultKafkaConsumerFactory">
		<constructor-arg>
			<ref bean="consumerProperties1"/>
		</constructor-arg>
	</bean>

	<!-- 消费者容器配置信息 -->
	<bean id="containerProperties_example1" class="org.springframework.kafka.listener.config.ContainerProperties">
        <constructor-arg value="orderTopic"/>
        <property name="messageListener" ref="msgHandler"/>
	</bean>


	<!-- 创建messageListenerContainer bean，使用的时候，只需要注入这个bean -->
	<bean id="messageListenerContainer_example1" class="org.springframework.kafka.listener.KafkaMessageListenerContainer" >
		  <!--init-method="doStart">-->
		<constructor-arg ref="consumerFactory1"/>
		<constructor-arg ref="containerProperties_example1"/>
	</bean>


	<!-- 实际执行消息消费的类 -->
	<!--<bean id="messageListernerConsumerService" class="com.git.kafka.consumer.KafkaConsumerServer"/>-->
	<bean id="msgHandler" class="org.xinyu.com.mq.impl.example.ConsumerHandlerImpl"/>

	<!-- 实际执行消息消费的类 -->
	<!--<bean id="messageListernerImpl" class="org.xinyu.com.mq.impl.example.ConsumerHandlerImpl"/>-->

	<!-- 消费者容器配置信息 -->
	<!--<bean id="containerProperties_trade" class="org.springframework.kafka.listener.ContainerProperties">-->
	<!--<constructor-arg value="order_Topic"/>-->
	<!--<property name="messageListener" ref="messageListernerImpl"/>-->
	<!--</bean>-->
	<!--<bean id="containerProperties_other" class="org.springframework.kafka.listener.ContainerProperties">-->
	<!--<constructor-arg value="other_Topic"/>-->
	<!--<property name="messageListener" ref="messageListernerImpl"/>-->
	<!--</bean>-->

	<!-- 创建messageListenerContainer bean，使用的时候，只需要注入这个bean -->
	<!--<bean id="messageListenerContainer_trade" class="org.springframework.kafka.listener.KafkaMessageListenerContainer"-->
	<!--init-method="doStart">-->
	<!--<constructor-arg ref="consumerFactory"/>-->
	<!--<constructor-arg ref="containerProperties_trade"/>-->
	<!--</bean>-->

	<!--<bean id="messageListenerContainer_other" class="org.springframework.kafka.listener.KafkaMessageListenerContainer"-->
	<!--init-method="doStart">-->
	<!--<constructor-arg ref="consumerFactory"/>-->
	<!--<constructor-arg ref="containerProperties_other"/>-->
	<!--</bean>-->
</beans>
