
spring.application.name=kafka-producer-rest-provider
spring.profiles.active=dev
server.port=2222
#server.servlet.context-path=/dev

server.session.cookie.path=/
#management.endpoints.enabled-by-default=false
#management.endpoint.info.enabled=true
#management.endpoints.web.base-path=/actuator
management.endpoints.web.path-mapping.health=healthcheck
#management.endpoints.web.exposure.include=*
# 暴露refresh接入点 springboot 2.x使用
management.endpoints.web.exposure.include=refresh,health,info
#management.endpoint.health.show-details=always

management.endpoints.web.enabled=true
management.endpoints.enabled-by-default=true
management.endpoints.web.base-path=/kafka/actuator
management.health.db.enabled=true
management.endpoint.health.enabled=true
management.endpoint.metrics.enabled=true
management.endpoint.mappings.enabled=true
management.endpoint.info.enabled=true
management.endpoint.beans.enabled=true
management.endpoint.env.enabled=true
management.endpoint.health.show-details=always
management.endpoint.logfile.enabled=true
management.endpoint.scheduledtasks.enabled=true
management.endpoint.sessions.enabled=true
management.health.diskspace.enabled=true
management.info.git.enabled=true

# 开启健康检查（需要spring-boot-starter-actuator依赖）
#eureka.instance.prefer-ip-address=true
#续约到期时间(单位 S)默认是90S
eureka.instance.lease-expiration-duration-in-seconds=90
# 续约更新时间间隔（默认30秒）
eureka.instance.lease-renewal-interval-in-seconds=30
eureka.instance.instance-id=${spring.application.name}:${spring.cloud.client.ip-address}:${spring.application.instance-id:${server.port}}

#eureka.client.serviceUrl.defaultZone=http://jacky:admin@192.168.99.100:8761/eureka,http://jacky:admin@192.168.0.112:8761/eureka
eureka.client.serviceUrl.defaultZone=http://jacky:admin@192.168.0.112:8761/eureka
eureka.instance.preferIpAddress=true
#eureka.instance.nonSecurePortEnabled=true
eureka.instance.non-secure-port-enabled=true
#eureka.instance.non-secure-port=80
#eureka.instance.hostname=www.mq.ingress
#eureka.instance.nonSecurePort=80
#eureka.instance.non-secure-port=2222
#eureka.instance.hostname=192.168.0.112

#eureka.instance.instance-id=${spring.application.name}:${eureka.instance.hostname}
#eureka.instance.homePageUrl=http://${eureka.instance.hostname}:${eureka.instance.non-secure-port}/
#eureka.instance.statusPageUrl=http://${eureka.instance.hostname}:${eureka.instance.non-secure-port}/kafka/actuator/info
#eureka.instance.healthCheckUrl=http://${eureka.instance.hostname}:${eureka.instance.non-secure-port}/kafka/actuator/healthcheck
#eureka.instance.health-check-url-path=http://${eureka.instance.hostname}:${eureka.instance.non-secure-port}/kafka/actuator/health

spring.zipkin.base-url=http://192.168.0.112:7082
spring.sleuth.sampler.percentage=1.0
spring.zipkin.enabled=true
spring.zipkin.locator.discovery.enabled=true
spring.zipkin.sender.type=WEB
spring.sleuth.web.client.enabled=true
# SPRING SESSION (SessionProperties)
spring.session.store-type=none
#spring.session.timeout= # Session timeout. If a duration suffix is not specified, seconds will be used.
#spring.session.servlet.filter-order=-2147483598 # Session repository filter order.
#spring.session.servlet.filter-dispatcher-types=async,error,request # Session repository filter dispatcher types.
#
## SPRING SESSION HAZELCAST (HazelcastSessionProperties)
#spring.session.hazelcast.flush-mode=on-save # Sessions flush mode.
#spring.session.hazelcast.map-name=spring:session:sessions # Name of the map used to store sessions.
#
## SPRING SESSION JDBC (JdbcSessionProperties)
#spring.session.jdbc.cleanup-cron=0 * * * * * # Cron expression for expired session cleanup job.
#spring.session.jdbc.initialize-schema=embedded # Database schema initialization mode.
#spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.
#spring.session.jdbc.table-name=SPRING_SESSION # Name of the database table used to store sessions.
#
## SPRING SESSION MONGODB (MongoSessionProperties)
#spring.session.mongodb.collection-name=sessions # Collection name used to store sessions.
#
## SPRING SESSION REDIS (RedisSessionProperties)
#spring.session.redis.cleanup-cron=0 * * * * * # Cron expression for expired session cleanup job.
#spring.session.redis.flush-mode=on-save # Sessions flush mode.
#spring.session.redis.namespace=spring:session # Namespace for keys used to store sessions.
spring.redis.host=192.168.0.112
spring.redis.port=6379
spring.redis.cluster.max-redirects=
spring.redis.cluster.nodes=192.168.0.112:7000,192.168.0.112:7001,192.168.0.112:7002,192.168.0.112:7003,192.168.0.112:7004,192.168.0.112:7005,192.168.0.112:7006

jdbc.driverClassName=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://192.168.0.112:3306/digital_dance_dev?useUnicode=true&characterEncoding=utf-8
jdbc.username=root
jdbc.password=123456
jdbc.initialSize=3 
jdbc.minIdle=2
jdbc.maxActive=60
jdbc.maxWait=60000
jdbc.timeBetweenEvictionRunsMillis=60000
jdbc.minEvictableIdleTimeMillis=30000
jdbc.validationQuery=SELECT 'x'
jdbc.testWhileIdle=true
jdbc.testOnBorrow=false
jdbc.testOnReturn=false
jdbc.poolPreparedStatements=true
jdbc.maxPoolPreparedStatementPerConnectionSize=20
jdbc.removeAbandoned=true
jdbc.removeAbandonedTimeout=120
jdbc.logAbandoned=false
jdbc.filters=stat
spring.datasource.url=jdbc:mysql://192.168.0.112:3306/digital_dance_dev?useUnicode=true&characterEncoding=utf-8
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.filters=stat

bootstrap.servers=192.168.0.112:9092

group.id=0
retries=1
batch.size=16384
linger.ms=1
buffer.memory=33554432
enable.auto.commit=true
auto.commit.interval.ms=1000
session.timeout.ms=15000
key.serializer=org.apache.kafka.common.serialization.StringSerializer
value.serializer=org.apache.kafka.common.serialization.StringSerializer

# 暴露refresh接入点 springboot 2.x使用
#management.endpoints.web.exposure.include=refresh

## bus
spring.cloud.config.failFast=true

spring.cloud.bus.trace.enabled = true

#spring.rabbitmq.host=192.168.0.112
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=guest
#spring.rabbitmq.password=guest

#和重试机制相关的配置有如下四个：
# 配置重试次数，默认为6
spring.cloud.config.retry.max-attempts=6
# 间隔乘数，默认1.1
spring.cloud.config.retry.multiplier=1.1
# 初始重试间隔时间，默认1000ms
spring.cloud.config.retry.initial-interval=1000
# 最大间隔时间，默认2000ms
spring.cloud.config.retry.max-interval=2000

## 开启基于HTTP basic的认证
#spring.security.basic.enabled=true
## 配置登录的账号
#spring.security.user.name=jacky123
## 配置登录的密码
#spring.security.user.password=admin123
#
## 开启基于HTTP basic的认证
#security.basic.enabled=true
## 配置登录的账号
#security.user.name=jacky123
## 配置登录的密码
#security.user.password=admin123